@model List<Activity>
@{
    ViewData["Title"] = "Team Leader";
}

<div id="mainPage">
    @*<input id="startDate"  type="text" class="form-control"><span class="input-group-addon"><i class="glyphicon glyphicon-th"></i></span>*@
    <div style="height:70px">

    </div>

    <input type="number" hidden id="teamId" value="@ViewBag.TeamId" />
    <div id="tasksView">
        <div style="padding:8px;border: 0px solid white; border-radius: 8px; background:white; box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);">
            <table class="table table-hover text-center table-sm" id="teamTable">
                <thead class="tableh alert-info thead-dark">
                    <tr>
                        <th scope="col">Task Name</th>
                        <th scope="col">Project</th>
                        <th scope="col">Priority </th>
                        <th scope="col">Start Date </th>
                        <th scope="col">Due Date </th>
                        <th scope="col">Progress</th>
                        <th scope="col">Status</th>
                    </tr>
                </thead>
                <tbody>
                    @for (int i = 0; i < Model.Count(); i++)
                    {
                        <tr id="@Model[i].Id" onclick='displaySubTasks("@Model[i].Id")'>
                            <td>@Model[i].Name</td>

                            <td>@Model[i].Project.Name</td>
                            <td>@Model[i].Priority</td>

                            <td>@Model[i].StartDate.Day @Model[i].StartDate.ToString("MMM") @Model[i].StartDate.Year</td>
                            <td>@Model[i].EndDate.Day @Model[i].EndDate.ToString("MMM") @Model[i].EndDate.Year</td>



                            <td>
                                <div class="progress">
                                    <div class="progress-bar" role="progressbar" style="width: @Model[i].Progress%;"
                                         aria-valuenow="20" aria-valuemin="0" aria-valuemax="100">@Model[i].Progress%</div>
                                    </div>
                                </td>


                                @if (Model[i].Status == Status.OnHold)
                                {
                                    <td>
                                        <button class="btn btn-sm btn-warning" onclick="ChangeStatus(event,@Model[i].Id)"
                                                onmouseover="StatusColor(event.target)"
                                                onmouseout="StatusColor(event.target)">
                                            OnHold
                                        </button>
                                    </td>
                                }
                                else
                                {
                                    <td>
                                        <button class="btn btn-sm btn-success" onclick="ChangeStatus(event,@Model[i].Id)"
                                                onmouseover="StatusColor(event.target)"
                                                onmouseout="StatusColor(event.target)">
                                            Active
                                        </button>
                                    </td>
                                }
                            </tr>
                        }
                </tbody>
            </table>
        </div>
    </div>
</div>
<div id="Board">
</div>


<!-- Add SubTask -->
<div class="modal fade" id="addSubTaskModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <form method="post" data-ajax-url="/SubTask/AddSubTask" data-ajax="true" data-ajax-method="Post" data-ajax-complete="addSubTask"
                  data-ajax-update="#tableBody" data-ajax-mode="after" id="SubTaskForm">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Add SubTask</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body" id="addmodalBody">
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-primary">Add</button>
                    <button type="reset" class="btn btn-secondary" data-dismiss="modal">Close</button>
                </div>
            </form>
        </div>
    </div>
</div>


<!-- Edit SubTask -->
<div class="modal fade" id="editSubTaskModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <form method="post" data-ajax-url="/SubTask/editSubTask" data-ajax="true" data-ajax-method="Post" data-ajax-complete="editSubTask"
                  data-ajax-mode="replace" id="editSubTaskForm">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Update</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body" id="editmodalBody">
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-primary">Update</button>
                    <button type="reset" class="btn btn-secondary" data-dismiss="modal">Close</button>
                </div>
            </form>
        </div>
    </div>
</div>


@* for comments // Omar *@

<!-- Button trigger modal -->
<button type="button" id="togleBtn" class="btn btn-primary d-none" data-toggle="modal" data-target="#exampleModal">
    Launch demo modal
</button>


<!-- Modal -->
<div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Hold Reasons</h5>
            </div>
            <div class="modal-body">
                <textarea id="reason" type="text" class="form-control" placeholder="Add Reasons Here..."></textarea>
            </div>
            <div class="modal-footer">
                <button id="close" type="button" class="btn btn-secondary" data-dismiss="modal" aria-label="Close">Close</button>
                <button id="send" type="button" class="btn btn-primary">Send</button>
            </div>
        </div>
    </div>
</div>


<!-- #endregion -->
@section scripts{
    <partial name="_ValidationScriptsPartial" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.9.0/js/bootstrap-datepicker.min.js"></script>
    <script src="~/lib/jquery-validation-unobtrusive-ajax/dist/jquery.unobtrusive-ajax.js"></script>
    <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>

    <script>
        function displaySubTasks(id) {
            $.ajax({
                url: "/SubTask/displaySubTasks",
                type: "Get",
                data: { taskId: `${id}` },
                success: function (result) {
                    if (result) {
                        $('#tasksView').hide();
                        $('#mainPage').append(result);
                    }
                }
            })
        }

        function BacktoList() {
            $('#subTaskView').remove();
            $('#tasksView').show();
        }

        //------Add SubTask

        function getAddSubTaskModal(TaskId) {
            $.ajax({
                url: "/SubTask/AddSubTask",
                type: "GET",
                data: { taskId: TaskId, teamId: $('#teamId').val() },
                success: function (res) {
                    $("#addmodalBody").append(res);
                    $('#addSubTaskModal').modal('show');
                }
            })
        }

        function addSubTask(result, status) {
            if (status == "success") {
                console.log(result);
                $('#addSubTaskModal').modal('hide');
                document.getElementById("SubTaskForm").reset();
                alert("SubTask added Successfully");
            }
            else {
                alert("Error While Adding SubTask");
                document.getElementById("SubTaskForm").reset();
            }
        }


        $('#addSubTaskModal').on('shown.bs.modal', function () {
            $('#startDate').datepicker({
                format: "dd/mm/yyyy",
                daysOfWeekDisabled: "5,6",
                todayHighlight: true,
                autoclose: true,
                clearBtn: true,
                startDate: new Date(),
                container: '#addSubTaskModal',
                datesDisabled: []
            }).on('changeDate', function (selected) {
                var minDate = new Date(selected.date.valueOf());
                $('#endDate').datepicker('setStartDate', minDate);
            });

            $('#endDate').datepicker({
                format: "dd/mm/yyyy",
                daysOfWeekDisabled: "5,6",
                todayHighlight: true,
                autoclose: true,
                clearBtn: true,
                startDate: $("#startDate").val(),
                endDate: $("#taskEndDate").val(),
                container: '#addSubTaskModal',
                datesDisabled: []
            }).on('changeDate', function (selected) {
                var maxDate = new Date(selected.date.valueOf());
                $('#startDate').datepicker('setEndDate', maxDate);
            });
        });

        $('#addSubTaskModal').on('hidden.bs.modal', function () {
            $("#addmodalBody").empty();
        })


        //-------Edit SubTask

        function getEditSubTaskModal(subTaskId) {
            $.ajax({
                url: "/SubTask/EditSubTask",
                type: "GET",
                data: { subtaskId: subTaskId },
                success: function (res) {
                    $("#editmodalBody").append(res);
                    $("#editSubTaskForm").attr("data-ajax-update", `#${subTaskId}`);
                    $('#editSubTaskModal').modal('show');
                }
            })
        }

        function editSubTask(result, status) {
            if (status == "success") {
                console.log(result);
                $('#editSubTaskModal').modal('hide');
                document.getElementById("editSubTaskForm").reset();
                alert("SubTask Updated Successfully");
            }
            else {
                alert("Error While updating SubTask");
                document.getElementById("editSubTaskForm").reset();
            }
        }


        $('#editSubTaskModal').on('shown.bs.modal', function () {
            $('#startDate').datepicker({
                format: "dd/mm/yyyy",
                daysOfWeekDisabled: "5,6",
                todayHighlight: true,
                autoclose: true,
                clearBtn: true,
                startDate: new Date(),
                container: '#editSubTaskModal',
                datesDisabled: []
            }).on('changeDate', function (selected) {
                var minDate = new Date(selected.date.valueOf());
                $('#endDate').datepicker('setStartDate', minDate);
            });

            $('#endDate').datepicker({
                format: "dd/mm/yyyy",
                daysOfWeekDisabled: "5,6",
                todayHighlight: true,
                autoclose: true,
                clearBtn: true,
                startDate: $("#startDate").val(),
                endDate: $("#taskEndDate").val(),
                container: '#editSubTaskModal',
                datesDisabled: []
            }).on('changeDate', function (selected) {
                var maxDate = new Date(selected.date.valueOf());
                $('#startDate').datepicker('setEndDate', maxDate);
            });
        });

        $('#editSubTaskModal').on('hidden.bs.modal', function () {
            $("#editmodalBody").empty();
        })


        //Change status
        function ChangeStatus(event, Id) {
            event.stopPropagation();
            var element = event.target;
            var txtValue = element.innerText;
            var value;
            $("#togleBtn").trigger("click");

            $('#send').click(function () {
                var text = $('#reason').val()
                //console.log(text)//send reason in notification
                text.value = '';
                $("#exampleModal").modal('toggle');
                debugger
                switch (txtValue) {
                    case 'Active':
                        value = 0;
                        element.classList.remove('btn-warning')
                        element.classList.add('btn-success')
                        element.innerText = 'Active'
                        break;
                    case 'OnHold':
                        value = 1;
                        element.classList.remove('btn-success')
                        element.classList.add('btn-warning')
                        element.innerText = 'OnHold'
                        break;
                }
                $.ajax({
                    type: "GET",
                    url: `/Task/EditStatus`,
                    data: {
                        id: Id,
                        status: value
                    },
                    success: function (response) {
                    },
                    error: function (x, y, err) {
                        console.log(arguments)
                    }
                })

            })
        }

        function StatusColor(element) {
            switch (element.innerText) {
                case 'OnHold':
                    element.classList.remove('btn-warning')
                    element.classList.add('btn-success')
                    element.innerText = 'Active'
                    break;
                case 'Active':
                    element.classList.remove('btn-success')
                    element.classList.add('btn-warning')
                    element.innerText = 'OnHold'
                    break;
            }
        }


        function parseDate(s) {
            var b = s.split("/");
            return new Date(b[0], --b[1], b[2]);
        }

        ///Dashboard
        function Dashboard(id) {
            $.ajax({
                type: "GET",
                url: `/Task/Dashboard`,
                data: { taskId: id },
                success: function (response) {
                    //console.log(response)
                    $('#subTaskView').hide();
                    $('#Board').prepend(response);
                    LoadData();

                    //$('#Board').show();
                },
                error: function (x, y, err) {
                    console.log(arguments)
                }
            })
        }

        function LoadData() {
            //debugger;
            var ns = [];
            var ps = [];
            var dur = [];
            var eng = [];
            var st = [];
            var ed = [];
            var names = $('.staskname')
            var progress = $('.staskprog')
            var durations = $('.staskdur')
            var engineers = $('.engname')
            var startdates = $('.ststartdate')
            var enddates = $('.stenddate')
            for (var i = 0; i < names.length; i++) {
                //console.log(names[i].defaultValue)
                ns.push(names[i].defaultValue)
            }
            for (var i = 0; i < progress.length; i++) {
                //console.log(progress[i].defaultValue)
                ps.push(progress[i].defaultValue)
            }
            for (var i = 0; i < durations.length; i++) {
                //console.log(progress[i].defaultValue)
                dur.push(durations[i].defaultValue)
            }
            for (var i = 0; i < engineers.length; i++) {
                //console.log(names[i].defaultValue)
                eng.push(engineers[i].defaultValue)
            }
            for (var i = 0; i < startdates.length; i++) {
                //console.log(names[i].defaultValue)
                st.push(startdates[i].defaultValue)
            }
            for (var i = 0; i < enddates.length; i++) {
                //console.log(names[i].defaultValue)
                ed.push(enddates[i].defaultValue)
            }
            //console.log(ns);
            //console.log(ps);
            //console.log(dur);
            //console.log(eng);
            //console.log(st);
            //console.log(ed);

            google.charts.load("current", { packages: ['corechart'] });
            google.charts.load("current", { packages: ["timeline"] });
            google.charts.setOnLoadCallback(drawChart);
            google.charts.setOnLoadCallback(drawChart2);
            //google.charts.setOnLoadCallback(drawChart3);
            google.charts.setOnLoadCallback(drawChart4);


            function drawChart() {

                var data = new google.visualization.DataTable();
                data.addColumn('string', 'Name');
                data.addColumn('number', 'Progress');
                data.addColumn({ role: "style" });
                data.addRows([
                    [`${ns[0]}`, parseInt(ps[0]), "#4da76b"],
                ]);

                for (let j = 1; j < ns.length; j++) {
                    data.addRows([
                        [`${ns[j]}`, parseInt(ps[j]), "#4da76b"],
                    ]);
                }

                var options = {
                    title: "Tasks Progress",
                    hAxis: { textStyle: { bold: true } },
                    vAxis: { minValue: 0, maxValue: 100 },
                    animation: {
                        startup: true,
                        duration: 2500,
                        easing: 'in',
                    },
                    bar: { groupWidth: "70%" },
                    legend: { position: "none" },
                };
                var chart = new google.visualization.ColumnChart(document.getElementById("columnchart_values"));
                chart.draw(data, options);
            }

            function drawChart2() {
                var data = new google.visualization.DataTable();
                data.addColumn('string', 'Name');
                data.addColumn('number', 'Time Spent');

                data.addRows([
                    [`${ns[0]}`, parseInt(dur[0])],
                ]);

                for (let j = 1; j < ns.length; j++) {
                    data.addRows([
                        [`${ns[j]}`, parseInt(dur[j])],
                    ]);
                }

                var options = {
                    title: 'Tasks Actual Durations',
                    pieHole: 0.4,
                    //chartArea: { left: 20, top: 0, width: '50%', height: '75%' }
                    chartArea: { left: 150, height: '80%' }

                };

                var chart = new google.visualization.PieChart(document.getElementById('donutchart'));
                chart.draw(data, options);
            }



            function drawChart4() {

                var container = document.getElementById('timeline');
                var chart = new google.visualization.Timeline(container);
                var dataTable = new google.visualization.DataTable();
                dataTable.addColumn({ type: 'string', id: 'Position' });
                dataTable.addColumn({ type: 'string', id: 'Name' });
                dataTable.addColumn({ type: 'date', id: 'Start' });
                dataTable.addColumn({ type: 'date', id: 'End' });

                dataTable.addRows([
                    [`${eng[0]}`, `${ns[0]}`, parseDate(st[0]), parseDate(ed[0])]
                ]);


                for (let j = 1; j < ns.length; j++) {
                    dataTable.addRows([
                        [`${eng[j]}`, `${ns[j]}`, parseDate(st[j]), parseDate(ed[j])]
                    ]);

                }



                var options = {
                    forceIFrame: true,
                    backgroundColor: 'paige',
                    colors: ['red', 'yellow', 'green', 'blue'],
                    timeline: {
                        rowLabelStyle: { fontName: 'Helvetica', fontSize: 18, color: 'black' },
                        barLabelStyle: { fontName: 'italic', fontSize: 14 }
                    }
                };
                chart.draw(dataTable, options);
            }
        }

        function Show(divName) {
            $(`#${divName}`).removeClass('d-none');
        }

        function Hide(divName) {
            $(`#${divName}`).addClass('d-none');
        }

        function BackToList3() {
            $('#DashBoard').remove();
            //$('#Board').hide();
            $('#subTaskView').show();
        }

        function BackToList2() {
            $('#notasks').remove();
            //$('#Board').hide();
            $('#subTaskView').show();
        }

    </script>
}

@section Style{
    <style>

        body {
            background-color: #eef5f0;
        }
    </style>
}