// <auto-generated />
using System;
using ITI.CEI40.Monitor.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ITI.CEI40.Monitor.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200510212138_test")]
    partial class test
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ITI.CEI40.Monitor.Entities.Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<DateTime>("EstDuration")
                        .HasColumnName("Estimated Duration");

                    b.Property<int>("FK_ProjectId");

                    b.Property<int>("FK_TeamId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("Priority");

                    b.Property<float>("Progress");

                    b.Property<DateTime>("StartDate")
                        .HasColumnName("Start Date");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("FK_ProjectId");

                    b.HasIndex("FK_TeamId");

                    b.ToTable("Task");
                });

            modelBuilder.Entity("ITI.CEI40.Monitor.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<int>("AvailableTime");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<int?>("FK_TeamID");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<float>("SalaryRate");

                    b.Property<string>("SecurityStamp");

                    b.Property<float>("TotalEvaluation");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<int>("Workload");

                    b.HasKey("Id");

                    b.HasIndex("FK_TeamID");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("ITI.CEI40.Monitor.Entities.Claim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int>("FK_SubTaskId");

                    b.HasKey("Id");

                    b.HasIndex("FK_SubTaskId");

                    b.ToTable("Claims");
                });

            modelBuilder.Entity("ITI.CEI40.Monitor.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FK_ManagerID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.HasIndex("FK_ManagerID");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("ITI.CEI40.Monitor.Entities.DepartmentProjects", b =>
                {
                    b.Property<int>("DepartmentID");

                    b.Property<int>("ProjectID");

                    b.HasKey("DepartmentID", "ProjectID");

                    b.HasIndex("ProjectID");

                    b.ToTable("DepartmentProjects");
                });

            modelBuilder.Entity("ITI.CEI40.Monitor.Entities.EngineerSubTasks", b =>
                {
                    b.Property<string>("EngineerID");

                    b.Property<int>("SubTaskID");

                    b.Property<float>("Evaluation");

                    b.Property<int>("Status");

                    b.HasKey("EngineerID", "SubTaskID");

                    b.HasIndex("SubTaskID");

                    b.ToTable("EngineerSubTasks");
                });

            modelBuilder.Entity("ITI.CEI40.Monitor.Entities.Project", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<DateTime>("EndDate");

                    b.Property<float>("EstimatedDuration");

                    b.Property<float>("Income");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<float>("Outcome");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<int>("Priority");

                    b.Property<float>("Progress");

                    b.Property<DateTime>("StartDate");

                    b.Property<int>("Status");

                    b.Property<float>("TotalBudget");

                    b.HasKey("ID");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("ITI.CEI40.Monitor.Entities.SubTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<DateTime>("EstDuration")
                        .HasColumnName("Estimated Duration");

                    b.Property<int>("FK_TaskId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("Priority");

                    b.Property<float>("Progress");

                    b.Property<DateTime>("StartDate")
                        .HasColumnName("Start Date");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("FK_TaskId");

                    b.ToTable("SubTask");
                });

            modelBuilder.Entity("ITI.CEI40.Monitor.Entities.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FK_DepartmentId");

                    b.Property<string>("FK_TeamLeaderId")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("FK_DepartmentId");

                    b.HasIndex("FK_TeamLeaderId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "aa3ca182-d0ed-4d96-9fc9-854c38719a67",
                            ConcurrencyStamp = "854ce3f6-dc75-42b2-8a9a-72a145b39a81",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "b177b33a-4b16-4e6b-9351-6720a034a2a9",
                            ConcurrencyStamp = "baa46d31-4561-414e-9a49-df0da5b6be0e",
                            Name = "Project Manager",
                            NormalizedName = "PROJECT MANAGER"
                        },
                        new
                        {
                            Id = "b37665b1-b1cc-4503-89f6-b88c2ab74be7",
                            ConcurrencyStamp = "d75bfb74-2348-4c5b-a1cd-4763ca25b009",
                            Name = "Department Manager",
                            NormalizedName = "DEPARTMENT MANAGER"
                        },
                        new
                        {
                            Id = "ed6f36c9-d4a1-4189-b31b-a395d2b7a64c",
                            ConcurrencyStamp = "214f622d-d351-46eb-9fc0-b02b665217b4",
                            Name = "Team Leader",
                            NormalizedName = "TEAM LEADER"
                        },
                        new
                        {
                            Id = "a8d58a43-a764-47c0-8f79-0480f85117f9",
                            ConcurrencyStamp = "23d4fe62-5a8b-4d72-9a2d-ec266377050c",
                            Name = "Engineer",
                            NormalizedName = "ENGINEER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ITI.CEI40.Monitor.Entities.Activity", b =>
                {
                    b.HasOne("ITI.CEI40.Monitor.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("FK_ProjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ITI.CEI40.Monitor.Entities.Team", "Team")
                        .WithMany("Tasks")
                        .HasForeignKey("FK_TeamId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ITI.CEI40.Monitor.Entities.ApplicationUser", b =>
                {
                    b.HasOne("ITI.CEI40.Monitor.Entities.Team", "Team")
                        .WithMany("Engineers")
                        .HasForeignKey("FK_TeamID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ITI.CEI40.Monitor.Entities.Claim", b =>
                {
                    b.HasOne("ITI.CEI40.Monitor.Entities.SubTask", "SubTask")
                        .WithMany("Claims")
                        .HasForeignKey("FK_SubTaskId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ITI.CEI40.Monitor.Entities.Department", b =>
                {
                    b.HasOne("ITI.CEI40.Monitor.Entities.ApplicationUser", "Manager")
                        .WithMany()
                        .HasForeignKey("FK_ManagerID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ITI.CEI40.Monitor.Entities.DepartmentProjects", b =>
                {
                    b.HasOne("ITI.CEI40.Monitor.Entities.Department", "Department")
                        .WithMany("DepartmentProjects")
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ITI.CEI40.Monitor.Entities.Project", "Project")
                        .WithMany("DepartmentProjects")
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ITI.CEI40.Monitor.Entities.EngineerSubTasks", b =>
                {
                    b.HasOne("ITI.CEI40.Monitor.Entities.ApplicationUser", "Engineer")
                        .WithMany("EngineerSubTasks")
                        .HasForeignKey("EngineerID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ITI.CEI40.Monitor.Entities.SubTask", "SubTask")
                        .WithMany("EngineerSubTasks")
                        .HasForeignKey("SubTaskID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ITI.CEI40.Monitor.Entities.SubTask", b =>
                {
                    b.HasOne("ITI.CEI40.Monitor.Entities.Activity", "Task")
                        .WithMany("SubTasks")
                        .HasForeignKey("FK_TaskId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ITI.CEI40.Monitor.Entities.Team", b =>
                {
                    b.HasOne("ITI.CEI40.Monitor.Entities.Department", "Department")
                        .WithMany("Teams")
                        .HasForeignKey("FK_DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ITI.CEI40.Monitor.Entities.ApplicationUser", "TeamLeader")
                        .WithMany()
                        .HasForeignKey("FK_TeamLeaderId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ITI.CEI40.Monitor.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ITI.CEI40.Monitor.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ITI.CEI40.Monitor.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ITI.CEI40.Monitor.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
