@model DashboardViewModel

<div id="DashBoard" style="background-color: #e6f5ea; padding:-50px">

    @for (int i = 0; i < Model.Tasks.Count; i++)
    {
        <input class="staskname" id="n-@i" value="@Model.Tasks[i].Name" hidden="hidden" />
        <input class="staskprog" id="p-@i" value="@Model.Tasks[i].Progress" hidden="hidden" />
        <input class="staskdur" id="d-@i" value="@(Model.Tasks[i].ActualDuratoin)" hidden="hidden" />
    }

    @foreach (var item in Model.TotalInvoices)
    {
        <input class="i-months" hidden value="@item.Month" />
        <input class="i-sales" hidden value="@item.Sales" />
        <input class="i-expenses" hidden value="@item.Expenses" />
    }


    @{
        List<Activity> behind = new List<Activity>();
        foreach (var item in Model.Tasks)
        {
            if (item.ActualDuratoin > (item.EndDate - item.StartDate).TotalDays)
            {
                behind.Add(item);
            }
        }
    }

    <br />


    <div class="slice " style="display:flex; justify-content:flex-start">
        <div class="dropdown">
            <a href="#" class="dropdown-toggle nav-link px-2 py-2 btn btn-outline-info mr-2" data-toggle="dropdown" role="button"
               aria-haspopup="true" aria-expanded="false"><i class="fas fa-clock"></i></a>

            <table class="dropdown-menu px-3 " style="min-width:23rem ;  border-collapse: separate; border-spacing: 5px 10px;">
                <tbody>
                    <tr>
                        <td class="  text-center alert alert-danger"><i class="far fa-hourglass"></i> Dead Line</td>
                        <td class=" text-center alert alert-danger"> @Model.Tasks[0].Project.EndDate.Value.Date.ToShortDateString()</td>
                    </tr>
                    <tr>
                        <td class=" text-center alert alert-warning"><i class="far fa-hourglass"></i> Remaining Time</td>
                        @{
                            int remaining = (int)(@Model.Tasks[0].Project.EndDate - DateTime.Now).Value.TotalDays;
                            if (remaining > 0)
                            {
                                <td class="text-center alert alert-warning">@remaining day</td>
                            }
                            else
                            {
                                <td class="text-center alert alert-warning">Time Ended</td>
                            }
                        }
                    </tr>
                    <tr class="m-1">
                        <td class=" text-center alert alert-info"><i class="fas fa-stopwatch"></i> Planned Duration</td>
                        <td class=" text-center alert alert-info"> @Model.Tasks[0].Project.EndDate-@Model.Tasks[0].Project.StartDate day</td>
                    </tr>
                    <tr>
                        <td class=" text-center alert alert-info "><i class="fas fa-stopwatch"></i> Actual Duration</td>
                        <td class=" text-center alert alert-info">@Model.Tasks[0].Project.EndDate.Value.Date.ToShortDateString()</td>
                    </tr>
                </tbody>
            </table>

        </div>
        <a class="font-weight-bold  alert alert-info mr-2 btn"  href="/project/index">Back To List</a>
        <div class="font-weight-bold text-center text-muted alert alert-info">@Model.Tasks[0].Project.Name</div>
    </div>





    <div class="slice" style="display:flex; justify-content:flex-start">
        @* Bar Chart *@
        <div style="height:350px; width:60%" id="columnchart_values"></div>
        <div style="width:40%">
            <h4 class="font-weight-bold">Progress</h4>
            <h5 class="font-weight-light">
                the progress of each task inside your project
            </h5>
        </div>
    </div>



    <div class="slice" style="display:flex; justify-content:flex-end">
        <div style="width:40%">
            <h4 class="font-weight-bold">Time Measure</h4>
            <h5 class="font-weight-light">
                the number of hours spent on each of the project's tasks
            </h5>
        </div>
        @* Donut Chart *@
        <div id="donutchart" style="height:350px; width:60%"></div>
    </div>






    <div class="slice" style="display:flex; justify-content:flex-start">


        @* Cost Chart *@
        <div class="slice" style="width:80.5%;margin-left:5px">
            <div id="chart_div" style="padding-left:30px; padding-top:30px;"></div>
        </div>



    </div>

</div>

@section Scripts{ 
<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
<script type="text/javascript">
    var modelInvoices = @Html.Raw(Json.Serialize(Model.TotalInvoices));
    console.log(modelInvoices)

    google.charts.load('current', { packages: ['corechart', 'line'] });
    google.charts.setOnLoadCallback(drawChart);
    google.charts.setOnLoadCallback(drawChart2);
    google.charts.setOnLoadCallback(drawChart3);

    var ns = [];
    var ps = [];
    var dur = [];
    var names = $('.staskname')
    var progress = $('.staskprog')
    var durations = $('.staskdur')
    for (var i = 0; i < names.length; i++) {
        //console.log(names[i].defaultValue)
        ns.push(names[i].defaultValue)
    }
    for (var i = 0; i < progress.length; i++) {
        //console.log(progress[i].defaultValue)
        ps.push(progress[i].defaultValue)
    }
    for (var i = 0; i < durations.length; i++) {
        //console.log(progress[i].defaultValue)
        dur.push(durations[i].defaultValue)
    }
    //console.log(ns);
    //console.log(ps);
    //console.log(dur);


   


    function drawChart() {

        var data = new google.visualization.DataTable();
        data.addColumn('string', 'Name');
        data.addColumn('number', 'Progress');
        data.addRows([
            [`${ns[0]}`, parseInt(ps[0])],
        ]);

        for (let j = 1; j < ns.length; j++) {
            data.addRows([
                [`${ns[j]}`, parseInt(ps[j])],
            ]);
        }

        var options = {
            //title: "Tasks Progress",
            hAxis: { textStyle: { bold: true } },
            vAxis: { minValue: 0, maxValue: 100 },
            animation: {
                startup: true,
                duration: 2500,
                easing: 'in',
            },
            bar: { groupWidth: "70%" },
            legend: { position: "top" },
            chartArea: { width: '78%', height: '78%' }
        };
        var chart = new google.visualization.ColumnChart(document.getElementById("columnchart_values"));
        chart.draw(data, options);
    }

    function drawChart2() {
        var data = new google.visualization.DataTable();
        data.addColumn('string', 'Name');
        data.addColumn('number', 'Time Spent');

        data.addRows([
            [`${ns[0]}`, parseInt(dur[0])],
        ]);

        for (let j = 1; j < ns.length; j++) {
            data.addRows([
                [`${ns[j]}`, parseInt(dur[j])],
            ]);
        }

        var options = {
            title: 'Tasks Actual Durations',
            pieHole: 0.4,
            //chartArea: { left: 20, top: 0, width: '50%', height: '75%' }
            chartArea: { width: '78%', height: '78%', left: '30%' }
        };

        var chart = new google.visualization.PieChart(document.getElementById('donutchart'));
        chart.draw(data, options);
    }

    //modelInvoices
    function drawChart3() {
        var data = new google.visualization.DataTable();
        data.addColumn('string', 'Month');
        data.addColumn('number', 'Sales');
        data.addColumn('number', 'Expenses');
        data.addColumn('number', 'Net');
        // initial value
        var month = modelInvoices[0].month;
        var sales = modelInvoices[0].sales;
        var expenses = modelInvoices[0].expenses;
        var net = expenses - sales;
        data.addRows([[`${month}`, sales, expenses, net]]);
        // add the invices data
        for (var i = 1; i < modelInvoices.length; i++) {
            sales += modelInvoices[i].sales;
            expenses = modelInvoices[i].expenses;
            net = expenses - sales;
            data.addRows([[`${modelInvoices[i].month}`, sales, expenses, net]]);
        }


        var options = {
            chart: {
                title: 'Project Financial Status',
                subtitle: 'in thousand of poundds (LE)'
            },
            hAxis: { title: 'Months', titleTextStyle: { color: 'green' } },
            vAxis: { title: 'Money' },
            legend: { position: 'bottom' },
            colors: ['#a52714', '#097138', '#003366'],
            width: 800,
            height: 300
        };

        //var chart = new google.visualization.AreaChart(document.getElementById('chart_div'));
        var chart = new google.charts.Line(document.getElementById('chart_div'));
        chart.draw(data, options);
    }

</script>
    }

@section Style{
    <style>
        body {
            background-color: #e6f5ea;
        }

        .slice {
            border: 1px solid white;
            border-radius: 10px;
            padding: 10px;
            margin: 10px 0 0px 0;
            background: white;
        }
    </style>
}